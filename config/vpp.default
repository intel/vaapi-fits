###
### Copyright (C) 2018-2019 Intel Corporation
###
### SPDX-License-Identifier: BSD-3-Clause
###

import copy

inputs = {
  "QCIF" : dict(
    source = os.path.join(assets, "yuv", "QCIF_NV12.yuv"),
    width = 176, height = 144, format = "NV12", frames = 5,
    levels = [0, 100],
    refctx = ["driver"],
  ),
  "QVGA" : dict(
    source = os.path.join(assets, "yuv", "QVGA_NV12.yuv"),
    width = 320, height = 240, format = "NV12", frames = 5,
    levels = [1, 99],
    refctx = ["driver"],
  ),
  "720p" : dict(
    source = os.path.join(assets, "yuv", "720p_NV12.yuv"),
    width = 1280, height = 720, format = "NV12", frames = 5,
    levels = [12, 57],
    refctx = ["driver"],
  ),
  "1080p" : dict(
    source = os.path.join(assets, "yuv", "1080p_NV12.yuv"),
    width = 1920, height = 1080, format = "NV12", frames = 5,
    levels = [84],
    refctx = ["driver"],
  ),
}

media._get_test_spec("vpp", "brightness").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "contrast").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "hue").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "saturation").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "csc").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "denoise").update(copy.deepcopy(inputs))
media._get_test_spec("vpp", "sharpen").update(copy.deepcopy(inputs))

# procamp should be the same for all drivers/middleware
for op in ["brightness", "contrast", "hue", "saturation"]:
  for v in media._get_test_spec("vpp", op).values():
    v["refctx"] = ["key:vpp.{}".format(op)]

# mirroring uses md5 metric and should be same for all drivers and middleware
media._get_test_spec("vpp", "mirroring").update(copy.deepcopy(inputs))
for v in media._get_test_spec("vpp", "mirroring").values():
  v["refctx"] = ["key:vpp.mirroring"]

# rotation uses md5 metric and should be same for all drivers and middleware
media._get_test_spec("vpp", "rotation").update(copy.deepcopy(inputs))
for v in media._get_test_spec("vpp", "rotation").values():
  v["refctx"] = ["key:vpp.rotation"]

# transpose uses md5 metric and should be same for all drivers and middleware
media._get_test_spec("vpp", "transpose").update(copy.deepcopy(inputs))
for v in media._get_test_spec("vpp", "transpose").values():
  v["refctx"] = ["key:vpp.transpose"]
  v.update(
    transpose = list(
      itertools.product([0, 90, 180, 270], ["vertical", "horizontal", None])
    )
  )

media._get_test_spec("vpp", "crop").update(copy.deepcopy(inputs))
for v in media._get_test_spec("vpp", "crop").values():
  v["refctx"] = ["key:vpp.crop"]
  v["crop"] = list(
    dict(zip(["left", "right", "top", "bottom"], v))
      for v in itertools.product([0, 10],[0, 10],[0, 10],[0, 10]))

media._get_test_spec("vpp", "deinterlace", "avc").update({
  "QVGA" : dict(
    source = os.path.join(assets, "avc", "QVGA_i_tff.h264"),
    width = 320, height = 240, format = "NV12", frames = 50,
    refctx = ["driver"],
  ),
})

###
### kate: syntax python;
###
