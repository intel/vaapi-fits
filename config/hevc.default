###
### Copyright (C) 2018-2019 Intel Corporation
###
### SPDX-License-Identifier: BSD-3-Clause
###

media._get_test_spec("hevc", "decode", "8bit").update({
  "QCIF" : dict(
    source = os.path.join(assets, "hevc", "QCIF.h265"),
    width = 176, height = 144, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.hevc.8bit"],
  ),
  "QVGA" : dict(
    source = os.path.join(assets, "hevc", "QVGA.h265"),
    width = 320, height = 240, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.hevc.8bit"],
  ),
  "720p" : dict(
    source = os.path.join(assets, "hevc", "720p.h265"),
    width = 1280, height = 720, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.hevc.8bit"],
  ),
  "1080p" : dict(
    source = os.path.join(assets, "hevc", "1080p.h265"),
    width = 1920, height = 1080, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.hevc.8bit"],
  ),
})

media._get_test_spec("hevc", "encode", "8bit").update({
"QCIF" : dict(
    source = os.path.join(assets, "yuv", "QCIF_NV12.yuv"),
    width = 176, height = 144, format = "NV12", frames = 300,
    refctx = ["driver"],
    cqp = [
      dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "main"),
      dict(gop = 30, slices = 1, bframes = 0, qp = 28, quality = 4, profile = "main"),
    ],
    cbr = [
      dict(gop = 30, slices = 1, bframes = 0, bitrate = 250, fps = 30, profile = "main"),
    ],
  ),
  "QVGA" : dict(
    source = os.path.join(assets, "yuv", "QVGA_NV12.yuv"),
    width = 320, height = 240, format = "NV12", frames = 300,
    refctx = ["driver"],
    cqp = [
      dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "main"),
      dict(gop = 30, slices = 4, bframes = 2, qp = 28, quality = 4, profile = "main"),
    ],
    cbr = [
      dict(gop = 30, slices = 1, bframes = 0, bitrate = 500, fps = 25, profile = "main"),
    ],
  ),
  "720p" : dict(
    source = os.path.join(assets, "yuv", "720p_NV12.yuv"),
    width = 1280, height = 720, format = "NV12", frames = 150,
    refctx = ["driver"],
    cqp = [
      dict(gop = 1, slices = 1, bframes = 0, qp = 28, quality = 4, profile = "main"),
    ],
    cbr = [
      dict(gop = 30, slices = 4, bframes = 2, bitrate = 4000, fps = 30, profile = "main"),
    ],
    vbr = [
      dict(gop = 30, slices = 3, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main"),
      dict(gop = 30, slices = 1, bframes = 3, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main"),
    ],
  ),
  "1080p" : dict(
    source = os.path.join(assets, "yuv", "1080p_NV12.yuv"),
    width = 1920, height = 1080, format = "NV12", frames = 150,
    refctx = ["driver"],
    cqp = [
      dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "main"),
      dict(gop = 30, slices = 4, bframes = 2, qp = 28, quality = 4, profile = "main"),
    ],
    cbr = [
      dict(gop = 30, slices = 1, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
    ],
    vbr = [
      dict(gop = 30, slices = 3, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main"),
      dict(gop = 30, slices = 1, bframes = 3, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main"),
    ],
  ),
})

###
### kate: syntax python;
###
