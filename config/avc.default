###
### Copyright (C) 2018-2019 Intel Corporation
###
### SPDX-License-Identifier: BSD-3-Clause
###

media._get_test_spec("avc", "decode").update({
  "QCIF" : dict(
    source = os.path.join(assets, "avc", "QCIF.h264"),
    width = 176, height = 144, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.avc"],
  ),
  "QVGA" : dict(
    source = os.path.join(assets, "avc", "QVGA.h264"),
    width = 320, height = 240, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.avc"],
  ),
  "720p" : dict(
    source = os.path.join(assets, "avc", "720p.h264"),
    width = 1280, height = 720, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.avc"],
  ),
  "1080p" : dict(
    source = os.path.join(assets, "avc", "1080p.h264"),
    width = 1920, height = 1080, format = "NV12", frames = 10,
    metric = dict(type = "md5"), refctx = ["key:decode.avc"],
  ),
})

media._get_test_spec("avc", "encode").update({
  "QCIF" : dict(
    source = os.path.join(assets, "yuv", "QCIF_NV12.yuv"),
    width = 176, height = 144, format = "NV12", frames = 300,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "main"),
        dict(gop = 30, slices = 1, bframes = 0, qp = 28, quality = 4, profile = "high"),
      ],
      cqp_lp = [
        dict(gop = 1, slices = 1, qp = 28, quality = 4, bframes = 0),
        dict(gop = 30, slices = 1, qp = 14, quality = 4, bframes = 0),
      ],
      cbr = [
        dict(gop = 30, slices = 1, bframes = 0, bitrate = 250, fps = 30, profile = "main"),
      ],
    ),
  ),
  "QVGA" : dict(
    source = os.path.join(assets, "yuv", "QVGA_NV12.yuv"),
    width = 320, height = 240, format = "NV12", frames = 300,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "high"),
        dict(gop = 30, slices = 4, bframes = 2, qp = 28, quality = 4, profile = "main"),
      ],
      cqp_lp = [
        dict(gop = 1, slices = 1, qp = 28, quality = 4, bframes = 0),
        dict(gop = 30, slices = 1, qp = 14, quality = 4, bframes = 0),
      ],
      cbr = [
        dict(gop = 30, slices = 1, bframes = 0, bitrate = 500, fps = 25, profile = "main"),
      ],
    ),
  ),
  "720p" : dict(
    source = os.path.join(assets, "yuv", "720p_NV12.yuv"),
    width = 1280, height = 720, format = "NV12", frames = 150,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        dict(gop = 1, slices = 1, bframes = 0, qp = 28, quality = 4, profile = "high"),
      ],
      cqp_lp = [
        dict(gop = 30, slices = 1, qp = 14, quality = 4, bframes = 0),
      ],
      cbr = [
        dict(gop = 30, slices = 4, bframes = 2, bitrate = 4000, fps = 30, profile = "main"),
      ],
      vbr = [
        dict(gop = 30, slices = 3, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "high"),
        dict(gop = 30, slices = 1, bframes = 3, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main"),
      ],
    ),
  ),
  "1080p" : dict(
    source = os.path.join(assets, "yuv", "1080p_NV12.yuv"),
    width = 1920, height = 1080, format = "NV12", frames = 150,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        dict(gop = 1, slices = 1, bframes = 0, qp = 14, quality = 4, profile = "high"),
        dict(gop = 30, slices = 4, bframes = 2, qp = 28, quality = 4, profile = "main"),
      ],
      cqp_lp = [
        dict(gop = 30, slices = 1, qp = 28, quality = 4, bframes = 0),
      ],
      cbr = [
        dict(gop = 30, slices = 1, bframes = 0, bitrate = 6000, fps = 30, profile = "high"),
      ],
      vbr = [
        dict(gop = 30, slices = 3, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main"),
        dict(gop = 30, slices = 1, bframes = 3, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main"),
      ],
    ),
  ),
})

if media._get_driver_name() == "iHD": # iHD driver supports LP with multi-slice
  for v in media._get_test_spec("avc", "encode").values():
    v["variants"]["cqp_lp"].append(dict(gop = 30, slices = 4, qp = 14, quality = 4, bframes = 0))

media._get_test_spec("avc", "transcode").update({
  "H_H-AVC_QCIF" : dict(
    source = os.path.join(assets, "avc", "QCIF.h264"),
    width = 176, height = 144, format = "NV12", frames = 10, mode = "hw",
    outputs = [dict(codec = "avc", mode = "hw")],
  ),
  "S_H-AVC_QCIF" : dict(
    source = os.path.join(assets, "avc", "QCIF.h264"),
    width = 176, height = 144, format = "NV12", frames = 10, mode = "sw",
    outputs = [dict(codec = "avc", mode = "hw")],
  ),
  "H_H-AVC-8X_QCIF" : dict(
    source = os.path.join(assets, "avc", "QCIF.h264"),
    width = 176, height = 144, format = "NV12", frames = 10, mode = "hw",
    outputs = [dict(codec = "avc", mode = "hw", channels = 8)],
  ),
  "H_H-AVC-2X_H-HEVC_H-MJPEG-2X_H-MPEG2_720p" : dict(
    source = os.path.join(assets, "avc", "720p.h264"),
    width = 1280, height = 720, format = "NV12", frames = 10, mode = "hw",
    outputs = [
      dict(codec = "avc", mode = "hw", channels = 2),
      dict(codec = "hevc", mode = "hw"),
      dict(codec = "mjpeg", mode = "hw", channels = 2),
      dict(codec = "mpeg2", mode = "hw"),
    ],
  ),
  "H_H-HEVC_S-MJPEG_1080p" : dict(
    source = os.path.join(assets, "avc", "1080p.h264"),
    width = 1920, height = 1080, format = "NV12", frames = 10, mode = "hw",
    outputs = [
      dict(codec = "hevc", mode = "hw"),
      dict(codec = "mjpeg", mode = "sw"),
    ],
  ),
})

for v in media._get_test_spec("avc", "transcode").values():
  v["refctx"] = ["driver"]

###
### kate: syntax python;
###
